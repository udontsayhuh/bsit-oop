using System;

namespace My_Colorful_Calculator
{
    // Absclass representing a calculator
    abstract class Calculator
    {
        protected float result;

        // Abs method to calculate operation between two numbers
        public abstract float Calculate(float num1, float num2, string operation);
    }

    // Calculations of basic arithmetic operations
    class BasicCalculator : Calculator // Inheritance: BasicCalculator inherits from Calculator
    {
        // Method to calculate operation between two numbers
        public override float Calculate(float num1, float num2, string operation)
        {
            switch (operation)
            {
                case "+":
                    result = num1 + num2;
                    break;
                case "-":
                    result = num1 - num2;
                    break;
                case "*":
                    result = num1 * num2;
                    break;
                case "/":
                    if (num2 != 0)
                        result = num1 / num2;
                    else
                        throw new DivideByZeroException("Error: Division by zero!");
                    break;
            }
            return result;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Title and Text Color
            Console.Title = "Marv's Calculator";
            Console.ForegroundColor = ConsoleColor.Cyan;

            // Loop to calculate again
            bool calculateAgain = true;

            // Main loop for calculator
            while (calculateAgain)
            {
                // Start of calculation process
                Console.WriteLine("START CALCULATING:");

                // Input the first number
                float num1 = GetValidNumber("Enter a number: ");

                // Input the operator or '=' to calculate
                string currentOperator = GetValidOperator("Enter the operator (+, -, *, /) or '=' to calculate: ");

                BasicCalculator calculator = new BasicCalculator(); // Abstraction: Calculations are abstracted behind Calculator interface

                // Loop to input numbers and operators until '=' is entered
                while (currentOperator != "=")
                {
                    // Input the next number
                    float num2 = GetValidNumber("Enter a number: ");

                    // Calculate based on current operator
                    num1 = calculator.Calculate(num1, num2, currentOperator); // Polymorphism: The actual method called depends on the object type

                    // Input the next operator or '=' to calculate
                    currentOperator = GetValidOperator("Enter the operator (+, -, *, /) or '=' to calculate: ");
                }

                // Output the result
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"Result: {num1}");

                // Ask user to calculate again
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("Do you want to calculate again? (yes/no): ");
                string choice = Console.ReadLine().ToLower();

                // Exit loop if 'no' is entered
                if (choice != "yes")
                    calculateAgain = false;
            }

            // Just a closing message
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("Thank you for using Marv's Calculator!");
            Console.ReadKey();
        }

        // Method to get a valid number input from the user
        static float GetValidNumber(string message)
        {
            float number;
            while (true)
            {
                Console.Write(message);
                if (float.TryParse(Console.ReadLine(), out number))
                    break;
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Invalid input! Please enter a valid number.");
                    Console.ForegroundColor = ConsoleColor.Cyan;
                }
            }
            return number;
        }

        // Method to get a valid operator input from the user
        static string GetValidOperator(string message)
        {
            string op;
            while (true)
            {
                Console.Write(message);
                op = Console.ReadLine();
                if (op == "+" || op == "-" || op == "*" || op == "/" || op == "=")
                    break;
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Invalid operator! Please enter a valid operator or '='.");
                    Console.ForegroundColor = ConsoleColor.Cyan;
                }
            }
            return op;
        }
    }
}

// Inheritance and Polymorphism: the changes applied were the abstract class which inherits it to the basic class (a concrete class which is the BasicCalculator)
// Encasulation: the variables are only called when needed
// Abstraction: the calculation process
// Code organization were added too to enhanced readability of the code like: (GetValidNumber and GetValidOperator) to make sure that the user inputs are valid
// In my original code, I only applied the abstraction and encapsulation because it does not require all the input to be valid and sequentially loops
// But now, I added the principles of OOP to modify my original code to meet the requirements of the new laboratory assignment
