using System;
using System.Collections.Generic;

namespace CalculatorApp
{
    // Class representing a simple calculator
    public class Calculator
    {
        // Addition operation
        public double Add(double num1, double num2)
        {
            return num1 + num2;
        }

        // Subtraction operation
        public double Subtract(double num1, double num2)
        {
            return num1 - num2;
        }

        // Multiplication operation
        public double Multiply(double num1, double num2)
        {
            return num1 * num2;
        }

        // Division operation
        public double Divide(double num1, double num2)
        {
            if (num2 == 0)
            {
                throw new DivideByZeroException("Cannot divide by zero.");
            }
            return num1 / num2;
        }
    }

    // User Interface for calculator operations
    public class UserInterface
    {
        private Calculator calculator;

        // Constructor
        public UserInterface()
        {
            calculator = new Calculator();
        }

        // Method to display the menu
        public void DisplayMenu()
        {
            Console.Clear();
            Console.WriteLine("===================================");
            Console.WriteLine("           Calculator App          ");
            Console.WriteLine("===================================\n");
            Console.WriteLine("Enter numbers and operations separated by Enter:");
            Console.WriteLine("When done, enter '=' to display the result.");
            Console.WriteLine("\nOperations:");
            Console.WriteLine("    [+] Addition");
            Console.WriteLine("    [-] Subtraction");
            Console.WriteLine("    [*] Multiplication");
            Console.WriteLine("    [/] Division");
        }

        // Method to perform calculation
        public void PerformCalculation()
        {
            double result = 0;
            string input;
            List<string> inputs = new List<string>();

            // Get user input until '=' is entered
            do
            {
                input = Console.ReadLine();
                inputs.Add(input);
            } while (input != "=");

            try
            {
                result = EvaluateExpression(inputs);
                Console.WriteLine($"The result is: {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        // Method to evaluate the expression provided by the user
        private double EvaluateExpression(List<string> inputs)
        {
            double result = 0;
            char currentOperator = '+';
            bool isFirst = true;

            // Iterate through the input list
            foreach (var input in inputs)
            {
                if (input == "=")
                    break;

                if (isFirst)
                {
                    result = Convert.ToDouble(input);
                    isFirst = false;
                    continue;
                }

                // Check if the input is an operator or operand
                if (input == "+" || input == "-" || input == "*" || input == "/")
                {
                    currentOperator = Convert.ToChar(input);
                }
                else
                {
                    // Convert input to double (operand) and perform calculation based on the current operator
                    double operand = Convert.ToDouble(input);
                    switch (currentOperator)
                    {
                        case '+':
                            result = calculator.Add(result, operand);
                            break;
                        case '-':
                            result = calculator.Subtract(result, operand);
                            break;
                        case '*':
                            result = calculator.Multiply(result, operand);
                            break;
                        case '/':
                            result = calculator.Divide(result, operand);
                            break;
                        default:
                            throw new InvalidOperationException("Invalid operator.");
                    }
                }
            }

            return result;
        }

        // Main method to run the program
        static void Main(string[] args)
        {
            UserInterface ui = new UserInterface();
            char choice;

            // Display menu and perform calculation until user chooses to exit
            do
            {
                ui.DisplayMenu();
                ui.PerformCalculation();
                Console.Write("Would you like to try again? [y] yes, [n] no: ");
                choice = Convert.ToChar(Console.ReadLine());
            } while (char.ToLower(choice) == 'y');
        }
    }
}
